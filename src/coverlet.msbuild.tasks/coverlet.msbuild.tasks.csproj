<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Library</OutputType>
    <TargetFrameworks>netstandard2.0;$(NetMinimum)</TargetFrameworks>
    <AssemblyTitle>coverlet.msbuild.tasks</AssemblyTitle>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);PackBuildOutputs</TargetsForTfmSpecificContentInPackage>
    <ContentTargetFolders>build</ContentTargetFolders>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <!--
          suppress warning https://docs.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu5128
          If your package does not contain any lib/ or ref/ files and is not a meta-package,
          it likely does not have any dependencies that the package consumer needs.
          If you are packing with NuGet's MSBuild Pack target, you can set <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking> in any PropertyGroup in your project file.
    -->
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>
    <EnablePackageValidation>true</EnablePackageValidation>
    <GenerateDependencyFile>true</GenerateDependencyFile>
    <CentralPackageTransitivePinningEnabled>false</CentralPackageTransitivePinningEnabled>
    <NoWarn>$(NoWarn);NU5100;NU5129;NU5127</NoWarn>
  </PropertyGroup>

  <!-- Nuget package properties https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets -->
  <PropertyGroup>
    <PackageId>coverlet.msbuild</PackageId>
    <Title>coverlet.msbuild</Title>
    <Authors>tonerdo</Authors>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageProjectUrl>https://github.com/coverlet-coverage/coverlet</PackageProjectUrl>
    <PackageIconUrl>https://raw.githubusercontent.com/tonerdo/coverlet/master/_assets/coverlet-icon.svg?sanitize=true</PackageIconUrl>
    <PackageIcon>coverlet-icon.png</PackageIcon>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <DevelopmentDependency>true</DevelopmentDependency>
    <Description>Coverlet is a cross platform code coverage library for .NET, with support for line, branch and method coverage.</Description>
    <PackageTags>coverage testing unit-test lcov opencover quality</PackageTags>
    <PackageReadmeFile>MSBuildIntegration.md</PackageReadmeFile>
    <PackageReleaseNotes>https://github.com/coverlet-coverage/coverlet/blob/master/Documentation/Changelog.md</PackageReleaseNotes>
    <RepositoryType>git</RepositoryType>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" />
    <PackageReference Include="Microsoft.Build.Utilities.Core" VersionOverride="$(MicrosoftBuildVersion)" PrivateAssets="all" ExcludeAssets="Runtime" />
    <PackageReference Include="System.Security.AccessControl" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="$(MSBuildThisFileDirectory)..\coverlet.core\coverlet.core.csproj" PrivateAssets="all" />
  </ItemGroup>

  <ItemGroup>
    <None Include="$(MSBuildThisFileDirectory)..\..\_assets\coverlet-icon.png" Pack="true" PackagePath="\" />
    <None Include="..\..\Documentation\MSBuildIntegration.md" Link="MSBuildIntegration.md" Pack="true" PackagePath="\">
      <PackageCopyToOutput>true</PackageCopyToOutput>
    </None>
  </ItemGroup>

  <!-- NuGet package layout -->
  <!-- NuGet folders https://learn.microsoft.com/nuget/create-packages/creating-a-package#from-a-convention-based-working-directory -->
  <ItemGroup>
    <Content Include="buildMultiTargeting/**" Pack="true">
      <PackagePath>buildMultiTargeting</PackagePath>
    </Content>
    <TfmSpecificPackageFile Include="buildTransitive/**">
      <PackagePath>buildTransitive/$(TargetFramework)</PackagePath>
    </TfmSpecificPackageFile>
    <TfmSpecificPackageFile Include="build/**">
      <PackagePath>build/$(TargetFramework)</PackagePath>
    </TfmSpecificPackageFile>
  </ItemGroup>

  <Target Name="PackBuildOutputs" DependsOnTargets="BuildOnlySettings;ResolveReferences">
    <ItemGroup>
      <TfmSpecificPackageFile Include="$(TargetPath)" PackagePath="tasks\$(TargetFramework)" />
      <TfmSpecificPackageFile Include="$(ProjectDepsFilePath)" PackagePath="tasks\$(TargetFramework)" />
      <TfmSpecificPackageFile Include="@(DebugSymbolsProjectOutputGroupOutput)" PackagePath="tasks\$(TargetFramework)" />
      <TfmSpecificPackageFile Include="%(_ResolvedProjectReferencePaths.Identity)" PackagePath="tasks\$(TargetFramework)" />
      <TfmSpecificPackageFile Include="@(ReferenceCopyLocalPaths)" Exclude="@(_ResolvedProjectReferencePaths)" PackagePath="tasks\$(TargetFramework)\%(ReferenceCopyLocalPaths.DestinationSubPath)" />
    </ItemGroup>
  </Target>

</Project>
