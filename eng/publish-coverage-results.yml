# File: publish-coverage-results.yml
# uses reportgenerator task to create a code coverage report and aggregates available cobertura XML files. The results are publishes as a build artifact.

parameters:
  condition: 'succeeded()'
  reports: ''
  assemblyfilters: '-xunit*'
  classfilters: ''
  breakBuild: false
  minimumLineCoverage: 75

steps:
- task: Powershell@2
  displayName: ReportGenerator
  condition: ${{parameters.condition}}
  inputs:
    targetType: inline
    pwsh: true
    script: |
      dotnet tool restore --add-source https://api.nuget.org/v3/index.json
      dotnet tool list
      dotnet reportgenerator -reports:"${{parameters.reports}}" -targetdir:"$(Build.SourcesDirectory)\artifacts\CoverageReport" -reporttypes:"HtmlInline_AzurePipelines_Dark;Cobertura" -assemblyfilters:"${{parameters.assemblyfilters}}" -classfilters:"${{parameters.classfilters}}" -verbosity:Verbose --minimumCoverageThresholds:lineCoverage=${{parameters.minimumLineCoverage}}

- publish: '$(Build.SourcesDirectory)/artifacts/CoverageReport'
  displayName: 'Publish CoverageReport Artifact'
  artifact: CoverageResults_$(Agent.Os)_$(BuildConfiguration)
  condition: ${{parameters.condition}}

- task: PublishCodeCoverageResults@2
  displayName: 'Publish code coverage'
  condition: ${{parameters.condition}}
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/artifacts/CoverageReport/Cobertura.xml'
    failIfCoverageEmpty: ${{parameters.breakBuild}}
