parameters:
  - name: additionalPackOptions
    default: ''
  - name: runTests
    default: true

steps:
- task: UseDotNet@2
  inputs:
    version: 6.0.415
  displayName: Install .NET Core SDK for projects

- task: UseDotNet@2
  inputs:
    useGlobalJson: true
  displayName: Install .NET Core SDK 7.0 for additional tests

- script: dotnet restore
  displayName: Restore packages

- script: dotnet build -c $(BuildConfiguration) --no-restore -bl:build.binlog
  displayName: Build

- script: dotnet pack -c $(BuildConfiguration) --no-restore ${{ parameters.additionalPackOptions }}
  displayName: Pack

- task: DotNetCoreCLI@2
  displayName: Run tests with coverage
  enabled: ${{ parameters.runTests }}
  inputs:
    command: test
    projects: |
         **/coverlet.collector.tests.csproj
         **/coverlet.core.tests.csproj
         **/coverlet.integration.tests.csproj
         **/coverlet.msbuild.tasks.tests.csproj
    arguments: -c $(BuildConfiguration) --no-build -bl:test.binlog /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude="[coverlet.core.tests.samples.netstandard]*%2c[coverlet.tests.xunit.extensions]*%2c[coverlet.tests.projectsample]*" --diag:"$(Build.SourcesDirectory)\artifacts\log\$(Configuration)\coverlet.test.diag.log;tracelevel=verbose"
    testRunTitle: $(Agent.JobName)

- template: publish-coverlet-result-files.yml

- template: publish-coverage-results.yml
  parameters:
    reports: $(Build.SourcesDirectory)/**/coverage.opencover.xml
    condition: and(succeeded(), eq(variables['BuildConfiguration'], 'Debug'))
    assemblyfilters: '-xunit;-coverlet.testsubject;-Coverlet.Tests.ProjectSample.*'
    classfilters: '-[coverlet.core.tests.samples.netstandard]*;-[coverlet.tests.xunit.extensions]*'
