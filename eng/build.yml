steps:
- task: UseDotNet@2
  inputs:
    version: 6.0.416
  displayName: Install .NET Core SDK 6.0.416

- task: UseDotNet@2
  inputs:
    version: 7.0.403
  displayName: Install .NET Core SDK 7.0.403

- task: UseDotNet@2
  inputs:
    useGlobalJson: true
  displayName: Install .NET Core SDK 8.0.100 RC2

# create DefaultVersions.Generated.props with actual package version
- pwsh: |
    New-Item -ItemType Directory -Path artifacts/package/debug -Force
    New-Item -ItemType Directory -Path artifacts/package/release -Force
  displayName: create folder artifacts/package/$(BuildConfiguration)

- script: dotnet pack -c Debug src/coverlet.msbuild.tasks/coverlet.msbuild.tasks.csproj
  displayName: Pack coverlet.msbuild

- script: dotnet pack -c Debug src/coverlet.collector/coverlet.collector.csproj
  displayName: Pack coverlet.collector

- script: dotnet restore
  displayName: Restore packages

- script: dotnet build -c $(BuildConfiguration) --no-restore -bl:build.binlog
  displayName: Build

- script: dotnet pack -c $(BuildConfiguration) --no-restore
  displayName: Pack

- script: |
    dotnet test test/coverlet.collector.tests/coverlet.collector.tests.csproj -c $(BuildConfiguration) --no-build -bl:test.collector.binlog --results-directory:"$(Build.SourcesDirectory)\artifacts\Reports" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude="[coverlet.core.tests.samples.netstandard]*%2c[coverlet.tests.xunit.extensions]*%2c[coverlet.tests.projectsample]*%2c[testgen_]*" /p:ExcludeByAttribute="GeneratedCodeAttribute" --diag:"$(Build.SourcesDirectory)\artifacts\log\$(buildConfiguration)\coverlet.collector.test.diag.log;tracelevel=verbose"
    dotnet test test/coverlet.core.tests/coverlet.core.tests.csproj -c $(BuildConfiguration) --no-build -bl:test.core.binlog --results-directory:"$(Build.SourcesDirectory)\artifacts\Reports" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude="[coverlet.core.tests.samples.netstandard]*%2c[coverlet.tests.xunit.extensions]*%2c[coverlet.tests.projectsample]*%2c[testgen_]*" /p:ExcludeByAttribute="GeneratedCodeAttribute" --diag:"$(Build.SourcesDirectory)\artifacts\log\$(buildConfiguration)\coverlet.core.test.diag.log;tracelevel=verbose"
    dotnet test test/coverlet.integration.tests/coverlet.integration.tests.csproj -c $(BuildConfiguration) --no-build -bl:test.integration.binlog --results-directory:"$(Build.SourcesDirectory)\artifacts\Reports" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude="[coverlet.core.tests.samples.netstandard]*%2c[coverlet.tests.xunit.extensions]*%2c[coverlet.tests.projectsample]*%2c[testgen_]*" /p:ExcludeByAttribute="GeneratedCodeAttribute" --diag:"$(Build.SourcesDirectory)\artifacts\log\$(buildConfiguration)\coverlet.integration.test.diag.log;tracelevel=verbose"
    dotnet test test/coverlet.msbuild.tasks.tests/coverlet.msbuild.tasks.tests.csproj -c $(BuildConfiguration) --no-build -bl:test.msbuild.binlog --results-directory:"$(Build.SourcesDirectory)\artifacts\Reports" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude="[coverlet.core.tests.samples.netstandard]*%2c[coverlet.tests.xunit.extensions]*%2c[coverlet.tests.projectsample]*%2c[testgen_]*" /p:ExcludeByAttribute="GeneratedCodeAttribute" --diag:"$(Build.SourcesDirectory)\artifacts\log\$(buildConfiguration)\coverlet.msbuild.test.diag.log;tracelevel=verbose"
  displayName: Run tests with coverage

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/*.trx'
    mergeTestResults: false
    publishRunAttachments: true
    failTaskOnFailedTests: true

- ${{ if eq(variables['Agent.OS'], 'Windows_NT') }}:
  - script: |
      dotnet vstest "$(Build.SourcesDirectory)\artifacts\publish\coverlet.core.tests\debug\coverlet.core.tests.dll" --collect:"XPlat Code Coverage" --Diag:"$(Build.SourcesDirectory)\artifacts\log\$(Configuration)\coverlet.core.vstest.diag.log;tracelevel=verbose"  -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
    displayName: run with vstest
# - ${{ else }}:
#   - script: |
#       dotnet vstest "$(Build.SourcesDirectory)/artifacts/publish/coverlet.core.tests/debug/coverlet.core.tests.dll" --collect:"XPlat Code Coverage" --Diag:"$(Build.SourcesDirectory)/artifacts/log\$(Configuration)/coverlet.core.vstest.diag.log;tracelevel=verbose"  -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
#     displayName: run with vstest

- template: publish-coverlet-result-files.yml

- template: publish-coverage-results.yml
  parameters:
    reports: $(Build.SourcesDirectory)/**/*.opencover.xml
    condition: and(succeeded(), eq(variables['BuildConfiguration'], 'Debug'), eq(variables['agent.os'], 'Windows_NT'))
    assemblyfilters: '-xunit;-coverlet.testsubject;-Coverlet.Tests.ProjectSample.*;-coverlet.core.tests.samples.netstandard;-coverlet.tests.xunit.extensions;-coverlet.tests.utils'

