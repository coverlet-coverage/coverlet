steps:
- task: UseDotNet@2
  inputs:
    version: 6.0.416
  displayName: Install .NET Core SDK 6.0.416

- task: UseDotNet@2
  inputs:
    version: 7.0.403
  displayName: Install .NET Core SDK 7.0.403

- script: dotnet restore
  displayName: Restore packages

- script: dotnet build -c $(BuildConfiguration) --no-restore -bl:build.binlog
  displayName: Build

- script: dotnet pack -c $(BuildConfiguration) --no-restore
  displayName: Pack

- task: DotNetCoreCLI@2
  displayName: Run tests with coverage
  inputs:
    command: test
    projects: |
         **/coverlet.collector.tests.csproj
         **/coverlet.core.tests.csproj
         **/coverlet.integration.tests.csproj
         **/coverlet.msbuild.tasks.tests.csproj
    arguments: -c $(BuildConfiguration) --no-build -bl:test.binlog --results-directory:"$(Build.SourcesDirectory)\artifacts\Reports" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude="[coverlet.core.tests.samples.netstandard]*%2c[coverlet.tests.xunit.extensions]*%2c[coverlet.tests.projectsample]*" --diag:"$(Build.SourcesDirectory)\artifacts\log\$(buildConfiguration)\coverlet.test.diag.log;tracelevel=verbose"
    publishTestResults: false
    testRunTitle: $(Agent.JobName)

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/*.trx'
    mergeTestResults: false
    publishRunAttachments: true


- template: publish-coverlet-result-files.yml

- template: publish-coverage-results.yml
  parameters:
    reports: $(Build.SourcesDirectory)/**/*.opencover.xml
    condition: and(succeeded(), eq(variables['BuildConfiguration'], 'Debug'))
    assemblyfilters: '-xunit;-coverlet.testsubject;-Coverlet.Tests.ProjectSample.*'
    classfilters: '-[coverlet.core.tests.samples.netstandard]*;-[coverlet.tests.xunit.extensions]*'
