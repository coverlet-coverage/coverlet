// Remember to use full name because adding new using directives change line numbers

using System;
using System.Threading.Tasks;

namespace Coverlet.Core.Samples.Tests
{
    public class ExcludeFilterNestedAutogeneratedTypes
    {
        public void Run()
        {
            NestedToFilterOut nested = new NestedToFilterOut();
            nested.SomeMethodLambda();
            nested.SomeMethodAsync().ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public class NestedToFilterOut
        {
            public void SomeMethodLambda() => AppDomain.CurrentDomain.ProcessExit += (s, e) => { };
            public Task<int> SomeMethodAsync() => Task.FromResult(new Random().Next());
        }
    }

    public static class Issue_689
    {
        static Issue_689()
        {
            State = 0;
            EventSource_Issue_689.Handle += (s, e) => Handler(1);
            Uncoverlet.AddHandler();
        }

        internal static class Uncoverlet
        {
            internal static void AddHandler() => EventSource_Issue_689.Handle += (s, e) => Handler(2);
        }

        public static void Handler(int i)
        {
            State = i;
        }

        public static int State { get; set; }
    }

    public static class EventSource_Issue_689
    {
        public static event EventHandler<object> Handle;
        public static void RaiseEvent()
        {
            Handle?.Invoke(new object(), new object());
        }
    }

    public class ExcludeOuterTypes
    {
        public int Run()
        {
            return new ExcludeOuterTypes2().Run();
        }
    }

    public class ExcludeOuterTypes2
    {
        public int Run()
        {
            return 42;
        }
    }
}
